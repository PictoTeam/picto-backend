name: Feature Branch CI

on:
  push:
    branches: [ 'feature/**' ]
  pull_request:
    branches: [ 'feature/**' ]

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   
  #   services:
  #     postgres:
  #       image: postgres:17.5-alpine
  #       env:
  #         POSTGRES_DB: picto_test
  #         POSTGRES_USER: test
  #         POSTGRES_PASSWORD: test
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up JDK 24
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '24'
  #       distribution: 'temurin'

  #   - name: Cache Gradle packages
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.gradle/caches
  #         ~/.gradle/wrapper
  #       key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
  #       restore-keys: |
  #         ${{ runner.os }}-gradle-

  #   - name: Make gradlew executable
  #     run: chmod +x ./gradlew

  #   - name: Drop and recreate test database
  #     run: |
  #       PGPASSWORD=test psql -h localhost -U test -d postgres -c "DROP DATABASE IF EXISTS picto_test;"
  #       PGPASSWORD=test psql -h localhost -U test -d postgres -c "CREATE DATABASE picto_test;"

  #   - name: Run tests
  #     run: ./gradlew test
  #     env:
  #       DATABASE_URL: jdbc:postgresql://localhost:5432/picto_test
  #       DATABASE_USER: test
  #       DATABASE_PASSWORD: test

  #   - name: Build application
  #     run: ./gradlew build -x test

  docker-build-push:
    runs-on: ubuntu-latest
    # needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/picto-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} java -version
        echo "âœ… Docker image built successfully and can run Java"
